import streamlit as st
from PIL import Image, ImageEnhance
import numpy as np
import tensorflow as tf
import time
import pandas as pd
from streamlit_option_menu import option_menu

# Configurer la mise en page de l'application
st.set_page_config(layout="wide", page_icon=":smiley:", page_title="DigitRecognition")

# Charger le mod√®le une fois pour toutes
@st.cache_resource
def load_model():
    try:
        model = tf.keras.models.load_model("mon_modele_mnist.h5", compile=False)
        return model
    except Exception as e:
        st.error(f"Erreur lors du chargement du mod√®le : {e}")
        return None

model = load_model()

# Fonction pour afficher la barre de progression
def afficher_barre_de_progression(steps=5, wait=0.5):
    progress_bar = st.progress(0)
    status = st.empty()
    for i in range(steps):
        progress_bar.progress((i + 1) / steps)
        evolution = 100 * (i + 1) / steps
        status.text(f" üîé En cours...: {evolution:.0f}% ")
        time.sleep(wait)
    status.text("Analyse termin√©e ‚úÖ !")

# Fonction pour le pr√©traitement de l'image
def preprocess_image(img: Image.Image, factor=5):
    img = img.convert('L')  # Convertir en niveaux de gris
    img = img.resize((28, 28))  # Redimensionner √† 28x28 pixels
    enhancer = ImageEnhance.Contrast(img)
    img = enhancer.enhance(factor)  # Am√©liorer le contraste
    img_array = np.array(img) / 255.0  # Normaliser entre 0 et 1
    img_array = 1 - img_array  # Inverser les couleurs si n√©cessaire
    img_flattened = img_array.reshape(1, 28 * 28)
    return img_flattened
# CSS pour am√©liorer l'apparence
st.markdown("""
    <style>
        /* Titre principal */
        h1 {
            font-family: 'Arial', sans-serif;
            color: #1f77b4;
            font-size: 40px;
            text-align: center;
            font-weight: bold;
        }
        
        /* Sous-titres */
        h2, h3 {
            font-family: 'Poppins', sans-serif;
            color: #ff6f61;
            font-size: 25px;
            font-weight: bold;
        }
        
        /* Texte g√©n√©ral */
        p, li, span {
            font-family: 'Nunito SemiBold', sans-serif;
            color: #333;
            font-size: 13x;
            line-height: 1.6;
        }
        
        /* Texte dans la barre lat√©rale */
        .sidebar .sidebar-content {
            font-family: 'Poppins', sans-serif;
            color: #4d4d4d;
        }

        /* Couleur des liens */
        a {
            color: #0073e6;
            text-decoration: none;
        }

        /* Ajouter un survol aux liens */
        a:hover {
            color: #ff6f61;
        }
        
        /* Barre de progression */
        .stProgress {
            height: 20px;
        }
    </style>
""", unsafe_allow_html=True)
# Page d'accueil
def page_accueil():
    st.image("dalle.jpg", use_container_width=True)
    st.markdown('<h1 style="color:#1f77b4;text-align:center;">Bienvenue dans l\'application DigitRecognition</h1>', unsafe_allow_html=True)
    st.info(
        "Cette application utilise un mod√®le de deep learning pour pr√©dire le chiffre manuscrit pr√©sent sur une image. "
        "Elle est con√ßue pour offrir une interface simple et intuitive aux utilisateurs."
    )
    
    gif_path = "mnist0.gif"
    a, b, c = st.columns(3)
    b.image(gif_path, use_container_width=False)
    
    # Section 1 : Description de la base MNIST
    st.header("üìö 1. Description de la base de donn√©es MNIST")
    st.markdown("""
    - **MNIST (Modified National Institute of Standards and Technology)** est un dataset de r√©f√©rence pour les algorithmes de reconnaissance d'images.
    - **Contenu** : 
  - 60 000 images pour l'entra√Ænement.
  - 10 000 images pour le test.
  - Chaque image est en niveaux de gris, de taille **28x28 pixels**, et repr√©sente un chiffre manuscrit (0 √† 9).
""")

    # Section 2 : Traitement matriciel
    st.header("üñºÔ∏è 2. Traitement matriciel des images")
    st.markdown("Les images sont repr√©sent√©es sous forme de matrices de dimension 28x28, o√π chaque valeur correspond √† l'intensit√© d'un pixel (entre 0 et 255). Voici les √©tapes de traitement‚ÄØ:")

    st.subheader("1. Normalisation")
    st.latex(r"x_{\text{norm}} = \frac{x}{255}")
    st.markdown("Chaque pixel est divis√© par 255 pour que les valeurs soient comprises entre 0 et 1.")

    st.subheader("2. Aplatissement")
    st.markdown("Chaque image est transform√©e en un vecteur de dimension 784 = 28x28.")

    st.subheader("3. Inversion des couleurs (si n√©cessaire)")
    st.latex(r"x_{\text{invers√©}} = 1 - x_{\text{norm}}")

    # Section 3 : Pr√©traitement
    st.header("‚ú® 3. Pr√©traitement des donn√©es")
    st.markdown("""
    - **Am√©lioration du contraste** : Utilisation de transformations pour augmenter le contraste des chiffres et les rendre plus visibles pour le mod√®le.
    - **Mise √† l'√©chelle** : Les valeurs normalis√©es sont pr√™tes pour √™tre trait√©es par le r√©seau de neurones.
    """)

    # Section 4 : R√©seau de neurones
    st.header("ü§ñ 4. R√©seau de neurones utilis√©")
    st.markdown("""
    - **Architecture** :
    - Une premi√®re couche dense de **128 neurones** avec activation **ReLU** :
    """)
    st.latex(r"f(x) = \max(0, x)")
    st.markdown("""
    - Deux couches cach√©es suppl√©mentaires avec **64 et 32 neurones**, √©galement avec ReLU.
    - Une couche de sortie avec **10 neurones**, utilisant l'activation **Softmax** pour produire les probabilit√©s des classes :
    """)
    st.latex(r"\text{Softmax}(z_i) = \frac{e^{z_i}}{\sum_{j=1}^{10} e^{z_j}}")
    st.markdown("o√π $z_i$ est la sortie brute (logit) pour la classe $i$.")

    st.subheader("Fonction de perte")
    st.markdown("La fonction utilis√©e est l'entropie crois√©e cat√©gorique (Sparse Categorical Crossentropy) :")
    st.latex(r"\text{Loss} = -\frac{1}{N} \sum_{i=1}^N y_i \log(\hat{y}_i)")
    st.markdown("""
    o√π :
    - $y_i$ est la classe r√©elle.
    - $\hat{y}_i$ est la probabilit√© pr√©dite.
    - $N$ est le nombre d'√©chantillons.
    """)

    # Section 5 : Visualisation des pr√©dictions
    st.header("üìä 5. Visualisation des pr√©dictions")
    st.markdown("""
    - Pour chaque image donn√©e, le mod√®le produit une probabilit√© pour chaque chiffre (0 √† 9). Le chiffre avec la probabilit√© maximale est celui pr√©dit :
    """)
    st.latex(r"\text{Classe pr√©dite} = \arg\max_{i} (\text{Softmax}(z_i))")
    st.markdown("""
    - L'interface vous permet de t√©l√©charger une image et d'obtenir‚ÄØ:
      - Le chiffre pr√©dit.
      - Les probabilit√©s associ√©es √† chaque classe.
    """)

    st.markdown("Merci d'utiliser notre application‚ÄØ! üéâ N'h√©sitez pas √† explorer les fonctionnalit√©s disponibles et √† nous donner vos retours.")
 
    
    

# Page de pr√©diction
def page_upload_image():
    st.markdown('<h1 style="color:#1f77b4;text-align:center;">Pr√©diction des chiffres manuscrits</h1>', unsafe_allow_html=True)
    st.write("Chargez une image pour pr√©dire le chiffre manuscrit qu'elle contient.")
    
    upload = st.file_uploader("Chargez une image (formats accept√©s : PNG, JPEG, JPG)", type=["png", "jpeg", "jpg"])
    
    if upload is not None:
        # Lire et afficher l'image t√©l√©charg√©e
        image = Image.open(upload)
        c1, c2 = st.columns(2)
        c1.image(image, caption="Image charg√©e", use_container_width=False)
        
        # Pr√©traiter l'image et pr√©dire
        img_traitee = preprocess_image(image)
        afficher_barre_de_progression(steps=10, wait=0.3)
        
        if model is not None:
            predictions = model.predict(img_traitee)
            classe = int(np.argmax(predictions))
            probabilites = [round(float(proba), 4) for proba in predictions.flatten()]
            
            # Afficher les r√©sultats
            df_probabilites = pd.DataFrame({
                'Chiffre': list(range(len(probabilites))),
                'Probabilit√©': probabilites
            })
            c2.table(df_probabilites)
            c2.write(f"**Classe pr√©dite :** {classe}")
        else:
            c2.error("Le mod√®le n'a pas pu √™tre charg√©.")
            
        st.warning("Les pr√©dictions g√©n√©r√©es par cet outil ne sont pas toujours correctes. V√©rifiez l'image avant utilisation.")

# Page Feedback
def page_feedback():
    st.markdown('<h1 style="color:#1f77b4;text-align:center;">Donnez-nous votre avis üòä</h1>', unsafe_allow_html=True)
    st.write("Nous aimerions savoir ce que vous pensez de notre application.")
    
    feedback = st.text_area("Laissez votre avis ici", placeholder="√âcrivez votre feedback ici...")
    
    if st.button("Soumettre"):
        if feedback.strip():  # V√©rifier que le champ n'est pas vide
            # G√©n√©rer un nom de fichier bas√© sur l'heure actuelle
            timestamp = time.strftime("%Y%m%d_%H%M%S")
            filename = f"feedback_{timestamp}.txt"
            
            # Enregistrer le feedback dans un fichier
            with open(filename, "w", encoding="utf-8") as f:
                f.write(feedback)
            
            st.success("Merci pour votre retour ! üòä")
            st.write(f"Feedback enregistr√©. Fichier feedback : **{filename}**")
        else:
            st.warning("Veuillez √©crire un feedback avant de soumettre.")
        
def page_contributeurs():
    st.markdown('<h1 style="color:#1f77b4;text-align:center;">Contributeurs üë•</h1>', unsafe_allow_html=True)
    st.write("Voici les contributeurs qui ont particip√© au d√©veloppement de cette application :")
    st.markdown("""
    <ul style="list-style-type: none; padding: 0; font-size: 18px; color: #333;">
        <li style="margin-bottom: 20px;">
            <span style="color:#2ca02c; font-weight:bold;">DESSOUASSI Ez√©chiel</span><br>
            √âl√®ve Ing√©nieur Statisticien √âconomiste, ENEAM Cotonou<br>
            <strong>Email :</strong> <a href="mailto:dessouassi.ezechiel@eneam.bj" style="color:#1f77b4;">dessouassi.ezechiel@eneam.bj</a>
        </li>
        <li style="margin-bottom: 20px;">
            <span style="color:#2ca02c; font-weight:bold;">SIMIYAKI Philippe</span><br>
            √âl√®ve Ing√©nieur Statisticien √âconomiste, ENEAM Cotonou<br>
            <strong>Email :</strong> <a href="mailto:simiyaki.philippe@eneam.bj" style="color:#1f77b4;">simiyaki.philippe@eneam.bj</a>
        </li>
    </ul>
    """, unsafe_allow_html=True)

# Menu principal
# Menu vertical dans la barre lat√©rale
with st.sidebar:
    selected_page = option_menu(
        "Menu Principal",  # Titre du menu
        ["Accueil", "Predict on Picture (PoP)", "Feedback", "Contributeurs"],  # Noms des pages
        icons=['house', 'p-square-fill', 'envelope-arrow-up', 'people'],  # Ic√¥nes des pages
        menu_icon="cast",  # Ic√¥ne du menu principal
        default_index=0,  # Page par d√©faut s√©lectionn√©e
    )

# Informations suppl√©mentaires dans la barre lat√©rale
st.sidebar.title("A propos")
st.sidebar.info(
    """
    Cette application est d√©velopp√©e dans un but acad√©mique. 
    Il est r√©alis√© dans le cadre du projet √† rendre pour le cours de Machine Learning 1 enseign√© aux El√®ves Ing√©nieurs Statisticiens Economistes en deuxi√®me ann√©e (ISE2).
    """
)


if selected_page == "Accueil":
    page_accueil()
elif selected_page == "Predict on Picture (PoP)":
    page_upload_image()
elif selected_page == "Feedback":
    page_feedback()
elif selected_page == "Contributeurs":
    page_contributeurs()

